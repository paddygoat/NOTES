#include <unistd.h>			//Needed for I2C port
#include <fcntl.h>			//Needed for I2C port
#include <sys/ioctl.h>			//Needed for I2C port
#include <linux/i2c-dev.h>		//Needed for I2C port

        int file_i2c;
	int length;
	unsigned char buffer[60] = {0};

	
	//----- OPEN THE I2C BUS -----
	char *filename = (char*)"/dev/i2c-1";
	if ((file_i2c = open(filename, O_RDWR)) < 0)
	{
		//ERROR HANDLING: you can check errno to see what went wrong
		printf("Failed to open the i2c bus");
		return;
	}








// res = i2c_smbus_write_i2c_block_data(file, daddress, len, (const __u8 *)block); // up to 16 bytes
// int wiringPiI2CWriteReg16 (int fd, int reg, int data) ;



//You can now use SMBus commands or plain
//I2C to communicate with your device. SMBus commands are preferred if
//the device supports them. Both are illustrated below:
//  __u8 register = 0x10; /* Device register to access */

union LCD_noname_104
{
//unsigned char y8[2];
unsigned int y16;
} LCD_select_font_y;

//for sending bytes:
//I2C_send = LCD_select_font_y.y8[0];
//I2C_send = LCD_select_font_y.y8[1];

//for using the int:
LCD_select_font_y.y16 = 12345678;

  __s32 res;
  //char data[0] = 999;
  char buf[10];
  length = 4;
  /* Using SMBus commands */
  res = i2c_smbus_write_word_data(kI2CFileDescriptor,0x10,LCD_select_font_y.y16);
  if (res < 0) {
    /* ERROR HANDLING: i2c transaction failed */
  } else {
    /* res contains the read word */
  }

  /* Using I2C Write, equivalent of 
           i2c_smbus_write_word_data(file,register,0x6543) */
//  buf[0] = register;
//  buf[1] = 0x43;
//  buf[2] = 0x65;
//  if ( write(file,buf,3) != 3) {
//    /* ERROR HANDLING: i2c transaction failed */
//  }

